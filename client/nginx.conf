server {
    listen 80;
    server_name localhost;

    # Enable debug logging
    error_log  /var/log/nginx/error.log debug;
    access_log /var/log/nginx/access.log combined buffer=512k flush=1m;

    # Enable debug output
    error_log  /dev/stderr debug;
    access_log /dev/stdout combined buffer=512k flush=1m;

    # Add request tracking
    add_header X-Request-Time $request_time;
    add_header X-Upstream-Response-Time $upstream_response_time;
    add_header X-Request-ID $request_id;
    add_header X-Real-IP $remote_addr;
    add_header X-Forwarded-For $proxy_add_x_forwarded_for;
    add_header X-Forwarded-Proto $scheme;

    # Add custom headers for debugging
    add_header X-Frontend-Server $hostname;
    add_header X-Request-ID $request_id;
    add_header X-Original-URI $request_uri;
    add_header X-Forwarded-Path $uri;

    # Add detailed error pages
    error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 421 422 423 424 425 426 428 429 431 451 500 501 502 503 504 505 506 507 508 510 511 @error_page;

    # Add DNS resolver for AWS internal DNS
    resolver 169.254.169.253 valid=10s;
    resolver_timeout 5s;

    # Root directory for static files
    root /usr/share/nginx/html;
    index index.html;

    # Get backend host from environment variable with fallback
    env BACKEND_HOST;
    set_by_lua_block $backend_host {
      return os.getenv("BACKEND_HOST") or "sprints-management-backend-service-dev.sprints-management"
    }

    # Handle frontend routes
    location / {
        try_files $uri $uri/ /index.html;
        add_header Cache-Control "no-cache";

        # Add debug headers
        add_header X-Debug-Path $uri;
        add_header X-Debug-Host $http_host;
        add_header X-Debug-Time $time_local;
        add_header X-Debug-Request-Time $request_time;
        add_header X-Debug-Connection $connection;
        add_header X-Debug-Connection-Requests $connection_requests;
    }

    # Health check endpoint
    location = /health {
        access_log off;
        add_header Content-Type application/json;
        return 200 '{"status":"healthy","service":"frontend","timestamp":"$time_iso8601"}';
    }

    # API requests
    location /api {
        # Strip /api prefix and proxy to backend
        rewrite ^/api(/.*)$ $1 break;
        set $backend_target backend.sprints-management;
        proxy_pass http://$backend_target:3001;
        
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Original-URI $uri;

        # Add DNS resolver settings
        resolver 169.254.169.253 valid=5s;
        resolver_timeout 3s;
        
        # Add retries for reliability
        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 3;
        proxy_next_upstream_timeout 10s;
        
        # Add timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 30s;
        
        # Add error handling
        proxy_intercept_errors on;
        error_page 404 502 503 504 = @backend_error;
        
        # Add debug headers
        add_header X-Backend-Target $backend_target;
        add_header X-Debug-Path $uri;
        add_header X-Debug-Time $time_local;
        add_header X-Debug-Backend-Response $upstream_status;
    }

    location @backend_error {
        default_type application/json;
        return 502 '{"error":"Backend service unavailable","code":502,"path":"$request_uri","timestamp":"$time_iso8601"}';
    }
} 